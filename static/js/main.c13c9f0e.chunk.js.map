{"version":3,"sources":["pages/Top/index.tsx","pages/State/index.tsx","components/templates/Frame/styles/index.ts","components/atoms/Label/styles/index.ts","components/atoms/Label/index.tsx","components/molecules/LabelBlock/styles/index.ts","components/molecules/LabelBlock/index.tsx","components/organisms/Menu/index.tsx","components/templates/Frame/index.tsx","pages/index.tsx","serviceWorker.ts","index.tsx"],"names":["Top","className","src","alt","href","target","rel","State","React","count","setCount","style","alignItems","display","flexDirection","height","justifyContent","fontSize","onClick","prevCount","type","Div","styled","div","P","p","isCursorPointer","Label","children","Ul","ul","LabelBlock","items","labels","map","label","path","key","to","color","length","Menu","Frame","Pages","component","StateComponent","exact","TopComponent","render","Boolean","window","location","hostname","match","ReactDOM","PagesComponent","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAsBeA,G,MAnBO,WACpB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAI,kBAAkBD,UAAU,WAAWE,IAAI,SACpD,uDACA,uBACEF,UAAU,WACVG,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,mB,QCiBOC,EAxBS,WAAO,IAAD,EACFC,WAAe,GADb,mBACrBC,EADqB,KACdC,EADc,KAM5B,OACE,uBACEC,MAAO,CACLC,WAAY,SACZC,QAAS,OACTC,cAAe,SACfC,OAAQ,OACRC,eAAgB,WAGlB,uBAAKL,MAAO,CAAEM,SAAU,UAAYR,GACpC,0BAAQS,QAfK,WACfR,EAAS,SAAAS,GAAS,OAAIA,EAAY,KAcLC,KAAK,UAAhC,S,2ZCjBN,IAsBeC,EAtBHC,IAAOC,IAAV,K,kKCIT,IAQeC,EARLF,IAAOG,EAAV,IAGK,qBAAGC,gBAAyC,UAAY,YCIrDC,EALqB,SAAC,GAAD,IAClCC,EADkC,EAClCA,SACAF,EAFkC,EAElCA,gBAFkC,OAGlB,gBAAC,EAAD,CAAGA,gBAAiBA,GAAkBE,I,qOCTxD,IAYeC,EAZJP,IAAOQ,GAAV,KC0BOC,EAd2B,SAAC,GAA6B,IAChEC,EAD+D,EAA1BC,OACtBC,IAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACvB,sBAAIC,IAAKF,GACP,gBAAC,EAAD,CAAgBT,iBAAiB,GAC/B,gBAAC,IAAD,CAAMY,GAAIF,EAAMzB,MAAO,CAAE4B,MAAO,SAC7BJ,OAMT,OAAOH,EAAMQ,OAAS,gBAAC,EAAD,KAAKR,GAAc,MCZ5BS,EAVQ,WAOrB,OAAO,gBAAC,EAAD,CAAYR,OANmB,CACpC,CAAEE,MAAO,MAAOC,KAAM,QACtB,CAAED,MAAO,QAASC,KAAM,UACxB,CAAED,MAAO,QAASC,KAAM,cCYbM,EAXqB,SAAC,GAA8B,IAA5Bd,EAA2B,EAA3BA,SACrC,OACE,gBAAC,EAAD,KACE,uBAAK3B,UAAU,QACb,gBAAC,EAAD,OAEF,wBAAMA,UAAU,QAAQ2B,KCUfe,EAdqB,WAGlC,OACE,gBAAC,EAAD,KACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOC,UAAWC,EAAgBC,OAAO,EAAMV,KAAK,WACpD,gBAAC,IAAD,CAAOQ,UAAWG,EAAcD,OAAO,EAAMV,KAAK,SAClD,gBAAC,IAAD,CAAOU,OAAO,EAAMV,KAAK,IAAIY,OAPZ,kBAAM,gBAAC,IAAD,CAAUV,GAAG,eCExBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASN,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOJ,UAAWW,EAAgBT,OAAO,EAAOV,KAAK,OAEvDoB,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c13c9f0e.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst Top: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"images/logo.svg\" className=\"App-logo\" alt=\"logo\" />\n        <p>React 勉強会</p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n};\n\nexport default Top;\n","import * as React from 'react';\n\nconst State: React.FC = () => {\n  const [count, setCount] = React.useState(0);\n  const addCount = () => {\n    setCount(prevCount => prevCount + 1);\n  };\n\n  return (\n    <div\n      style={{\n        alignItems: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        justifyContent: 'center'\n      }}\n    >\n      <div style={{ fontSize: '100px' }}>{count}</div>\n      <button onClick={addCount} type=\"button\">\n        Add\n      </button>\n    </div>\n  );\n};\n\nexport default State;\n","import styled from 'styled-components';\n\nconst Div = styled.div`\n  .main {\n    height: calc(100% - 50px);\n    left: 0px;\n    position: absolute;\n    top: 50px;\n    width: 100%;\n  }\n\n  .menu {\n    align-items: center;\n    background-color: #282c34;\n    display: flex;\n    height: 50px;\n    left: 0px;\n    position: fixed;\n    top: 0px;\n    width: 100%;\n    z-index: 2;\n  }\n`;\n\nexport default Div;\n","import styled from 'styled-components';\n\nexport interface PProps {\n  isCursorPointer: boolean;\n}\n\nconst P = styled.p<PProps>`\n  align-items: center;\n  color: #fff;\n  cursor: ${({ isCursorPointer }) => (isCursorPointer ? 'pointer' : 'default')};\n  display: flex;\n  height: 20px;\n`;\n\nexport default P;\n","import * as React from 'react';\nimport P from './styles';\n\ninterface LabelProps {\n  children: React.ReactNode;\n  isCursorPointer: boolean;\n}\n\nconst Label: React.FC<LabelProps> = ({\n  children,\n  isCursorPointer\n}: LabelProps) => <P isCursorPointer={isCursorPointer}>{children}</P>;\n\nexport default Label;\n","import styled from 'styled-components';\n\nconst Ul = styled.ul`\n  align-items: center;\n  display: flex;\n  list-style-type: none;\n  text-decoration: none;\n  text-align: center;\n\n  > li {\n    margin-left: 10px;\n  }\n`;\n\nexport default Ul;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport LabelComponent from '../../atoms/Label';\nimport Ul from './styles';\n\ninterface Label {\n  label: string;\n  path: string;\n}\n\nexport interface LablelPlops {\n  labels: Label[];\n}\n\nconst LabelBlock: React.FC<LablelPlops> = ({ labels }: LablelPlops) => {\n  const items = labels.map(({ label, path }) => (\n    <li key={label}>\n      <LabelComponent isCursorPointer={true}>\n        <Link to={path} style={{ color: '#fff' }}>\n          {label}\n        </Link>\n      </LabelComponent>\n    </li>\n  ));\n\n  return items.length ? <Ul>{items}</Ul> : null;\n};\n\nexport default LabelBlock;\n","import * as React from 'react';\nimport LabelBlock, { LablelPlops } from '../../molecules/LabelBlock';\n\nconst Menu: React.FC = () => {\n  const labels: LablelPlops['labels'] = [\n    { label: 'Top', path: '/top' },\n    { label: 'Props', path: '/props' },\n    { label: 'State', path: '/state' }\n  ];\n\n  return <LabelBlock labels={labels} />;\n};\n\nexport default Menu;\n","import * as React from 'react';\nimport Div from './styles';\nimport Menu from '../../organisms/Menu';\n\ninterface FrameProps {\n  children: React.ReactNode;\n}\n\nconst Frame: React.FC<FrameProps> = ({ children }: FrameProps) => {\n  return (\n    <Div>\n      <div className=\"menu\">\n        <Menu />\n      </div>\n      <main className=\"main\">{children}</main>\n    </Div>\n  );\n};\n\nexport default Frame;\n","import * as React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport TopComponent from './Top';\nimport StateComponent from './State';\nimport Frame from '../components/templates/Frame';\n\ntype TOutter = RouteComponentProps;\n\ntype PagesProps = TOutter;\n\nconst Pages: React.FC<PagesProps> = () => {\n  const renderRedirect = () => <Redirect to=\"/top\" />;\n\n  return (\n    <Frame>\n      <Switch>\n        <Route component={StateComponent} exact={true} path=\"/state\" />\n        <Route component={TopComponent} exact={true} path=\"/top\" />\n        <Route exact={true} path=\"/\" render={renderRedirect} />\n      </Switch>\n    </Frame>\n  );\n};\n\nexport default Pages;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import { ConnectedRouter } from 'connected-react-router';\n// import { createBrowserHistory } from 'history';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\n// import './index.css';\nimport PagesComponent from './pages';\nimport * as serviceWorker from './serviceWorker';\n\n// const history = createBrowserHistory();\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route component={PagesComponent} exact={false} path=\"/\" />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}